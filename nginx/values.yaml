dnsPolicy: ""
terminationGracePeriodSeconds: ""
sidecars: []
cloneStaticSiteFromGit:
  image:
    registry: "docker.io"
    digest: ""
    tag: "2.46.0-debian-12-r4"
    repository: "bitnami/git"
    pullPolicy: "IfNotPresent"
    pullSecrets: []
  gitSync:
    args: []
    resourcesPreset: "nano"
    resources: {}
    command: []
  extraVolumeMounts: []
  gitClone:
    args: []
    command: []
  interval: 60
  extraEnvVarsSecret: ""
  repository: ""
  branch: ""
  enabled: false
  extraEnvVars: []
namespaceOverride: ""
clusterDomain: "cluster.local"
extraEnvVarsCM: ""
podSecurityContext:
  fsGroup: 1001
  fsGroupChangePolicy: "Always"
  supplementalGroups: []
  enabled: true
  sysctls: []
priorityClassName: ""
customLivenessProbe: {}
hostAliases: []
startupProbe:
  failureThreshold: 6
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  initialDelaySeconds: 30
  enabled: false
nodeSelector: {}
customReadinessProbe: {}
replicaCount: 1
podLabels: {}
tolerations: []
healthIngress:
  extraTls: []
  annotations: {}
  extraPaths: []
  pathType: "ImplementationSpecific"
  secrets: []
  enabled: false
  path: "/"
  hostname: "example.local"
  ingressClassName: ""
  extraHosts: []
  selfSigned: false
  tls: false
  extraRules: []
automountServiceAccountToken: false
podAffinityPreset: ""
containerSecurityContext:
  runAsUser: 1001
  privileged: false
  seLinuxOptions: null
  capabilities:
    drop:
    - "ALL"
  seccompProfile:
    type: "RuntimeDefault"
  allowPrivilegeEscalation: false
  enabled: true
  runAsGroup: 1001
  runAsNonRoot: true
  readOnlyRootFilesystem: true
podAntiAffinityPreset: "soft"
schedulerName: ""
image:
  registry: "docker.io"
  debug: false
  digest: ""
  tag: "1.27.1-debian-12-r5"
  repository: "bitnami/nginx"
  pullPolicy: "IfNotPresent"
  pullSecrets: []
livenessProbe:
  failureThreshold: 6
  timeoutSeconds: 5
  periodSeconds: 10
  successThreshold: 1
  initialDelaySeconds: 30
  enabled: true
extraVolumeMounts: []
serverBlock: ""
networkPolicy:
  allowExternalEgress: true
  ingressNSMatchLabels: {}
  allowExternal: true
  extraIngress: []
  ingressNSPodMatchLabels: {}
  enabled: true
  extraEgress: []
hostIPC: false
topologySpreadConstraints: []
extraVolumes: []
lifecycleHooks: {}
updateStrategy:
  type: "RollingUpdate"
  rollingUpdate: {}
ingress:
  extraTls: []
  annotations: {}
  extraPaths: []
  tlsWwwPrefix: false
  pathType: "ImplementationSpecific"
  secrets: []
  enabled: false
  path: "/"
  hostname: "nginx.local"
  ingressClassName: ""
  apiVersion: ""
  extraHosts: []
  selfSigned: false
  tls: false
  extraRules: []
customStartupProbe: {}
existingServerBlockConfigmap: ""
kubeVersion: ""
sidecarSingleProcessNamespace: false
nodeAffinityPreset:
  values: []
  type: ""
  key: ""
containerPorts:
  http: "34"
  https: 8443
autoscaling:
  maxReplicas: ""
  minReplicas: ""
  targetCPU: ""
  targetMemory: ""
  enabled: false
metrics:
  prometheusRule:
    namespace: ""
    additionalLabels: {}
    rules: []
    enabled: false
  image:
    registry: "docker.io"
    digest: ""
    tag: "1.3.0-debian-12-r6"
    repository: "bitnami/nginx-exporter"
    pullPolicy: "IfNotPresent"
    pullSecrets: []
  resourcesPreset: "nano"
  extraArgs: []
  port: ""
  service:
    port: 9113
    annotations:
      prometheus.io/port: "{{ .Values.metrics.service.port }}"
      prometheus.io/scrape: "true"
  resources: {}
  serviceMonitor:
    jobLabel: ""
    relabelings: []
    scrapeTimeout: ""
    namespace: ""
    metricRelabelings: []
    interval: ""
    selector: {}
    enabled: false
    labels: {}
    honorLabels: false
  containerPorts:
    metrics: 9113
  securityContext:
    runAsUser: 1001
    seLinuxOptions: null
    enabled: false
  podAnnotations: {}
  enabled: false
commonAnnotations: {}
affinity: {}
commonLabels: {}
nameOverride: ""
hostNetwork: false
dnsConfig: {}
diagnosticMode:
  args:
  - "infinity"
  enabled: false
  command:
  - "sleep"
global:
  imageRegistry: ""
  imagePullSecrets: []
  compatibility:
    openshift:
      adaptSecurityContext: "auto"
staticSiteConfigmap: ""
podAnnotations: {}
extraEnvVars: []
readinessProbe:
  path: "/"
  failureThreshold: 3
  timeoutSeconds: 3
  periodSeconds: 5
  successThreshold: 1
  initialDelaySeconds: 5
  enabled: true
extraEnvVarsSecret: ""
staticSitePVC: ""
extraContainerPorts: []
resourcesPreset: "nano"
replicas: "1.0"
resources: {}
serviceAccount:
  automountServiceAccountToken: false
  name: ""
  create: true
  annotations: {}
extraDeploy: []
command: []
pdb:
  minAvailable: ""
  maxUnavailable: ""
  create: true
args: []
service:
  sessionAffinity: "None"
  annotations: {}
  type: "LoadBalancer"
  ports:
    http: 80
    https: 443
  targetPort:
    http: "http"
    https: "https"
  loadBalancerClass: ""
  sessionAffinityConfig: {}
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: "Cluster"
  nodePorts:
    http: ""
    https: ""
  clusterIP: ""
  extraPorts: []
fullnameOverride: ""
revisionHistoryLimit: 10
tls:
  certKeyFilename: "tls.key"
  certCAFilename: "ca.crt"
  certFilename: "tls.crt"
  cert: ""
  autoGenerated: true
  existingSecret: ""
  enabled: true
  key: ""
  ca: ""
initContainers: []
